@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Photography";
}

<h2>Photography</h2>
<h3>Travel - Jamaica</h3>

<div class="portfolio-box jamaica">
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/jamaica/lightning-show_LG.jpg" itemprop="contentUrl" data-size="2000x1333">
            <img src="~/Content/images/photography/jamaica/lightning-show.jpg" itemprop="thumbnail" alt="Lightning show at Frenchmans Cove" />
        </a>
        <figcaption itemprop="caption description">Lightning show at Frenchmans Cove</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/jamaica/waves-crashing-near-beach_LG.jpg" itemprop="contentUrl" data-size="2000x1333">
            <img src="~/Content/images/photography/jamaica/waves-crashing-near-beach.jpg" alt="Waves crash into rocks near a sandy beach" />
        </a>
        <figcaption itemprop="caption description">Waves crash into rocks near a sandy beach</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/jamaica/view-with-a-palm_LG.jpg" itemprop="contentUrl" data-size="2000x1333">
            <img src="~/Content/images/photography/jamaica/view-with-a-palm.jpg" alt="View of the mountains with a palm tree nearby" />
        </a>
        <figcaption itemprop="caption description">View of the mountains with a palm tree nearby</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/jamaica/funeral-procession_LG.jpg" itemprop="contentUrl" data-size="2000x1333">
            <img src="~/Content/images/photography/jamaica/funeral-procession.jpg" alt="Funeral procession goes by" />
        </a>
        <figcaption itemprop="caption description">Funeral procession goes by</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/jamaica/chapel-fort-rocky_LG.jpg" itemprop="contentUrl" data-size="2000x1333">
            <img src="~/Content/images/photography/jamaica/chapel-fort-rocky.jpg" alt="A chapel sits in golden light in Fort Rocky" />
        </a>
        <figcaption itemprop="caption description">A chapel sits in golden light in Fort Rocky</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/jamaica/a-goat_LG.jpg" itemprop="contentUrl" data-size="2000x1333">
            <img src="~/Content/images/photography/jamaica/a-goat.jpg" alt="A goat looks over" />
        </a>
        <figcaption itemprop="caption description">A goat looks over</figcaption>
    </figure>
</div>

<h3>Dogtography</h3>

<div class="portfolio-box dogtography">
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/dogtography/sheltie-looking-right.jpg" itemprop="contentUrl" data-size="800x690">
            <img src="~/Content/images/photography/dogtography/sheltie-looking-right.jpg" alt="Bi-black Shetland Sheepdog glancing to the right" />
        </a>
        <figcaption itemprop="caption description">Bi-black Shetland Sheepdog glancing to the right</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/dogtography/white-cottonball.jpg" itemprop="contentUrl" data-size="1035x690">
            <img src="~/Content/images/photography/dogtography/white-cottonball.jpg" alt="A white fluffy dog looking into the camera" />
        </a>
        <figcaption itemprop="caption description">A white fluffy dog looking into the camera</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/dogtography/puppy-pounce.jpg" itemprop="contentUrl" data-size="542x690">
            <img src="~/Content/images/photography/dogtography/puppy-pounce.jpg" alt="Puppy pouncing on another dog" />
        </a>
        <figcaption itemprop="caption description">Puppy pouncing on another dog</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/dogtography/picnic-table-dog.jpg" itemprop="contentUrl" data-size="981x690">
            <img src="~/Content/images/photography/dogtography/picnic-table-dog.jpg" alt="Dog looking up from picnic table" />
        </a>
        <figcaption itemprop="caption description">Dog looking up from picnic table</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/dogtography/stairs-dog.jpg" itemprop="contentUrl" data-size="1035x690">
            <img src="~/Content/images/photography/dogtography/stairs-dog.jpg" alt="Shetland Sheepdog running down the stairs" />
        </a>
        <figcaption itemprop="caption description">Shetland Sheepdog running down the stairs</figcaption>
    </figure>
    <figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/Photograph">
        <a href="~/Content/images/photography/dogtography/mini-aussie.jpg" itemprop="contentUrl" data-size="889x690">
            <img src="~/Content/images/photography/dogtography/mini-aussie.jpg" alt="Mini Australian shepard looking to its side" />
        </a>
        <figcaption itemprop="caption description">Mini Australian shepard looking to its side</figcaption>
    </figure>
</div>

@{ Html.RenderPartial("_PhotoSwipe"); }

@section styles {
    @Styles.Render("~/bundles/sections/photography")
    @Styles.Render("~/bundles/vendor/photo-swipe-css")
}

@section scripts {
    @Scripts.Render("~/bundles/vendor/photo-swipe")

    <script>
        var initPhotoSwipeFromDOM = function (gallerySelector) {

            // parse slide data (url, title, size ...) from DOM elements
            // (children of gallerySelector)
            var parseThumbnailElements = function (el) {
                var thumbElements = el.childNodes,
                    numNodes = thumbElements.length,
                    items = [],
                    figureEl,
                    linkEl,
                    size,
                    item;

                for (var i = 0; i < numNodes; i++) {

                    figureEl = thumbElements[i]; // <figure> element

                    // include only element nodes
                    if (figureEl.nodeType !== 1) {
                        continue;
                    }

                    linkEl = figureEl.children[0]; // <a> element

                    size = linkEl.getAttribute('data-size').split('x');

                    // create slide object
                    item = {
                        src: linkEl.getAttribute('href'),
                        w: parseInt(size[0], 10),
                        h: parseInt(size[1], 10)
                    };



                    if (figureEl.children.length > 1) {
                        // <figcaption> content
                        item.title = figureEl.children[1].innerHTML;
                    }

                    if (linkEl.children.length > 0) {
                        // <img> thumbnail element, retrieving thumbnail url
                        item.msrc = linkEl.children[0].getAttribute('src');
                    }

                    item.el = figureEl; // save link to element for getThumbBoundsFn
                    items.push(item);
                }

                return items;
            };

            // find nearest parent element
            var closest = function closest(el, fn) {
                return el && (fn(el) ? el : closest(el.parentNode, fn));
            };

            // triggers when user clicks on thumbnail
            var onThumbnailsClick = function (e) {
                e = e || window.event;
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var eTarget = e.target || e.srcElement;

                // find root element of slide
                var clickedListItem = closest(eTarget, function (el) {
                    return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
                });

                if (!clickedListItem) {
                    return;
                }

                // find index of clicked item by looping through all child nodes
                // alternatively, you may define index via data- attribute
                var clickedGallery = clickedListItem.parentNode,
                    childNodes = clickedListItem.parentNode.childNodes,
                    numChildNodes = childNodes.length,
                    nodeIndex = 0,
                    index;

                for (var i = 0; i < numChildNodes; i++) {
                    if (childNodes[i].nodeType !== 1) {
                        continue;
                    }

                    if (childNodes[i] === clickedListItem) {
                        index = nodeIndex;
                        break;
                    }
                    nodeIndex++;
                }



                if (index >= 0) {
                    // open PhotoSwipe if valid index found
                    openPhotoSwipe(index, clickedGallery);
                }
                return false;
            };

            // parse picture index and gallery index from URL (#&pid=1&gid=2)
            var photoswipeParseHash = function () {
                var hash = window.location.hash.substring(1),
                params = {};

                if (hash.length < 5) {
                    return params;
                }

                var vars = hash.split('&');
                for (var i = 0; i < vars.length; i++) {
                    if (!vars[i]) {
                        continue;
                    }
                    var pair = vars[i].split('=');
                    if (pair.length < 2) {
                        continue;
                    }
                    params[pair[0]] = pair[1];
                }

                if (params.gid) {
                    params.gid = parseInt(params.gid, 10);
                }

                return params;
            };

            var openPhotoSwipe = function (index, galleryElement, disableAnimation, fromURL) {
                var pswpElement = document.querySelectorAll('.pswp')[0],
                    gallery,
                    options,
                    items;

                items = parseThumbnailElements(galleryElement);

                // define options (if needed)
                options = {

                    // define gallery index (for URL)
                    galleryUID: galleryElement.getAttribute('data-pswp-uid'),

                    getThumbBoundsFn: function (index) {
                        // See Options -> getThumbBoundsFn section of documentation for more info
                        var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
                            pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
                            rect = thumbnail.getBoundingClientRect();

                        return { x: rect.left, y: rect.top + pageYScroll, w: rect.width };
                    }

                };

                // PhotoSwipe opened from URL
                if (fromURL) {
                    if (options.galleryPIDs) {
                        // parse real index when custom PIDs are used
                        // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
                        for (var j = 0; j < items.length; j++) {
                            if (items[j].pid == index) {
                                options.index = j;
                                break;
                            }
                        }
                    } else {
                        // in URL indexes start from 1
                        options.index = parseInt(index, 10) - 1;
                    }
                } else {
                    options.index = parseInt(index, 10);
                }

                // exit if index not found
                if (isNaN(options.index)) {
                    return;
                }

                if (disableAnimation) {
                    options.showAnimationDuration = 0;
                }

                // Pass data to PhotoSwipe and initialize it
                gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);
                gallery.init();
            };

            // loop through all gallery elements and bind events
            var galleryElements = document.querySelectorAll(gallerySelector);

            for (var i = 0, l = galleryElements.length; i < l; i++) {
                galleryElements[i].setAttribute('data-pswp-uid', i + 1);
                galleryElements[i].onclick = onThumbnailsClick;
            }

            // Parse URL and open gallery if it contains #&pid=3&gid=1
            var hashData = photoswipeParseHash();
            if (hashData.pid && hashData.gid) {
                openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);
            }
        };

        // execute above function
        initPhotoSwipeFromDOM('.portfolio-box');
    </script>
}
